{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ciallo～(∠・ω )⌒☆ • All posts by \"学习&技术\" category",
    "description": "合于时而动，不合于时而止",
    "home_page_url": "http://simoxdcs.github.io",
    "items": [
        {
            "id": "http://simoxdcs.github.io/2024/01/31/jiaocheng/%E6%97%B6%E9%9A%94n%E4%B9%85%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BF%BB%E6%96%B0%E8%AE%B0%E5%BD%95/",
            "url": "http://simoxdcs.github.io/2024/01/31/jiaocheng/%E6%97%B6%E9%9A%94n%E4%B9%85%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BF%BB%E6%96%B0%E8%AE%B0%E5%BD%95/",
            "title": "时隔n久的博客翻新记录",
            "date_published": "2024-01-31T11:37:49.000Z",
            "content_html": "<p>翻了翻记录，从我第一次开始写这个博客已经过去了四年的时间了，从一开始啥也不会，看着视频一点一点搭起来这个博客，到后面可以自定义一些其他想要的功能，都是在不断成长的证明，那么就简单说一说这段时间的博客翻新过程吧。</p>\n<p>其实想要翻新博客这个想法一直都有，但是之前总是因为各种原因最后不了了之了，这次总算是有这么一个机会来让我把博客啥的彻底翻新成能用的样子了，包括附加的一些功能，比如说像是 l2d 的看板娘之类的，之前的状态仅仅是能显示出来这个东西，具体的位置大小什么的都没办法调整，今年回来之后也算是把这个仔细地了解了一下，基本上实现了大部分的功能，还是挺不错的一个小玩意。</p>\n<p>下面我就把我遇到的问题还有怎么解决的都说一说吧，也算是给自己一个记录。</p>\n<p>首先我遇到的问题就是使用主题的图床貌似失效了，这个倒是最好解决的，只需要自己去新建一个图床里面放上喜欢的图片就好了，但是我去主题作者那边看的图床好像是正常的，但是我这边确实是无法加载，很奇怪。之后仅需要更改一下</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/00.png\" alt=\"1\" /></p>\n<p>这个目录的文件，把里面的内容全部改成图片的直链就好了</p>\n<p>就像这样</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/01.png\" alt=\"1\" /></p>\n<p>之后自动随机图片的功能就算是正常了，接下来就是给博客添加搜索功能，之前一开始的时候就有想过去添加这个功能，但是当时感觉配置的都是对的，结果没反应，研究了一会之后也就放弃了，打算之后再整，这次就顺手一起解决了，去网上简单搜索了一下教程，发现大伙用什么实现的都有，但是像是 hexo 这种有框架的一般还是用现成有的搜索网站解决的，我就是使用了 aloglia 来解决的，一方面是这个的教程比较多，另一方面是我使用的主题集成了 algolia 这个功能就能直接使用，比较舒服</p>\n<p>那就先简单来说说什么是 algolia 吧：</p>\n<p>Algolia 是一个托管搜索引擎，提供全文，数字和多面搜索，能够从第一次击键中提供实时结果，它提供了一组工具，可简化制作完整搜索体验并将其集成到您的网站和应用程序中的过程。这些包括：</p>\n<p>​\t支持多种不同语言的后端 API 客户端，用于索引、配置和管理数据。<br />\n​\t用于构建 Web 和移动搜索体验的前端小部件。<br />\n​\t与流行的框架和平台集成，进一步简化 Algolia 在现有项目中的集成。<br />\n​\t一个安全的分布式搜索网络，可托管您的内容并快速将其提供给客户。<br />\n​\t透明、可自定义的相关性算法。<br />\n​\t一个经过大量优化的搜索引擎，从头开始构建，C++。<br />\n​\t大量文档、实现指南和代码示例。<br />\n简单来说，Algolia 是一个提供云搜素服务的第三方平台，我们可以通过调用 Algolia 的 API 接口把我们自己站点的数据上传到 Alogolia 中，实现我们自己站点的搜索功能。</p>\n<p>不行了，这几天发烧了，得歇一阵子再写。。。。</p>\n<p>再开始写吧，时间已经是五天后了，这会已经都基本好了。</p>\n<p>现在开始说怎么基于 Alogolia 来实现静态博客的搜索功能，首先我们进入 Alogolia 的官网</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXNoYm9hcmQuYWxnb2xpYS5jb20=\">https://dashboard.algolia.com</span></p>\n<p>进入之后，如果没有账号则选择注册一个，成功登录之后进入 Dashboard，选择 Indices 新建一个 Index，名字随便起都可以，方便记忆就行。成功之后就开始进行主题集成 Alogolia 的部分的配置，这里需要用到 Algolia 的 API Keys 到我们自己的 hexo 的站点配置中，使二者成功关联，并且让我们的数据传输到 Alogolia 站点中，从而达成搜索功能，点击 Dashboard 左侧的 API Keys 按钮，我们就可以看到我们需要用到的部分： <code>Application ID</code>  、 <code>Search-Only API Key</code> 、 <code>Admin API KEY</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/03.png\" alt=\"1\" /></p>\n<p>然后将他们复制进我们站点的配置文件中</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/02.png\" alt=\"1\" /></p>\n<p>我们使用这个方法来实现搜索功能需要安装一个 Alogolia 的插件，执行此命令即可</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure></p>\n<p>成功之后就可以执行命令</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo alogia</span><br></pre></td></tr></table></figure></p>\n<p>用这条命令来将我们本地的数据发送到 Alogolia 网站的服务器中，之后重新生成一下博客功能就完美实现了，到此，搜索功能修复完成，接下来是博客的 l2d 小人的实现。</p>\n<p>关于 l2d 小人的实现，我之前就看过很多相关的教程，但是总是有些功能因为各种原因没有实现，有的是因为功能太过简陋而没有使用，有的是因为教程说的没看明白怎么使用，还有的教程根本说的就是依托，截图的操作和语言表达的根本就对不上而没办法看，一直导致我这个功能使用不了，这次我因为本身积累了一些前端开发的经验，再加上找到了很多新的教程，他们也有一些我之前遇到的同样的问题，这也就使得我解决起问题来更加的从容方便，下面我们正式开始教程</p>\n<p>首先是有一种简单的 l2d 看板娘，这种是最简单的，同样，功能也是最少的，这个是 hexo 的一个插件，只需要我们执行命令</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p>\n<p>之后再安装好需要使用的 l2d 模型就好了</p>\n<p>大概有这些</p>\n<p><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d-widget-model-chitose</span><br><span class=\"line\">live2d-widget-model-epsilon2_1</span><br><span class=\"line\">live2d-widget-model-gf</span><br><span class=\"line\">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class=\"line\">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class=\"line\">live2d-widget-model-haruto</span><br><span class=\"line\">live2d-widget-model-hibiki</span><br><span class=\"line\">live2d-widget-model-hijiki</span><br><span class=\"line\">live2d-widget-model-izumi</span><br><span class=\"line\">live2d-widget-model-koharu</span><br><span class=\"line\">live2d-widget-model-miku</span><br><span class=\"line\">live2d-widget-model-ni-j</span><br><span class=\"line\">live2d-widget-model-nico</span><br><span class=\"line\">live2d-widget-model-nietzsche</span><br><span class=\"line\">live2d-widget-model-nipsilon</span><br><span class=\"line\">live2d-widget-model-nito</span><br><span class=\"line\">live2d-widget-model-shizuku</span><br><span class=\"line\">live2d-widget-model-tororo</span><br><span class=\"line\">live2d-widget-model-tsumiki</span><br><span class=\"line\">live2d-widget-model-unitychan</span><br><span class=\"line\">live2d-widget-model-wanko</span><br><span class=\"line\">live2d-widget-model-z16</span><br></pre></td></tr></table></figure></p>\n<p>可以自己一个一个慢慢试出自己喜欢的</p>\n<p>然后执行指令</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-koharu //假设你选择的看板娘是koharu</span><br></pre></td></tr></table></figure></p>\n<p>之后再去站点的配置文件中加上这些代码</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">\tenable: trueenable //是否使用</span><br><span class=\"line\"> model:</span><br><span class=\"line\">\tuse: live2d-widget-model-koharu //要使用的模型名称</span><br><span class=\"line\"> display:</span><br><span class=\"line\">\tposition: right //显示的位置</span><br><span class=\"line\">\twidth: 150 //宽度</span><br><span class=\"line\">\theight: 150 //高度</span><br><span class=\"line\"> mobile:</span><br><span class=\"line\">\tshow: true //移动端是否显示</span><br></pre></td></tr></table></figure></p>\n<p>就可以成功看到效果了，非常的简单好用</p>\n<p>但是用这个来实现的看板娘功能很简单，只有一个视线跟随鼠标，并没有说话互动等功能，下面介绍的更加高级的看板娘则可以实现以上的这些功能</p>\n<p>一开始我看到的教程是从这个网站上看到的，也可以算是最初版</p>\n<p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.fghrsh.net/post/123.html</span><br></pre></td></tr></table></figure></p>\n<p>也正是这个网站让我产生了一定得给我的博客搞一个这个玩意的念头，<s>然后就摸了三年</s>。。。这篇文章的作者在看到了别人制作的一个看板娘之后开始了进一步的加工，实现了套 API 以及切换 L2D 模型、增加换装等等功能，正是因为这个套 API 导致了我困惑了很久，因为一开始作者在自己的服务器上运行了该看板娘的后端，并且在该篇教程中公开了 API，所以一开始使用该模型是很简单的事，需要自己配置的东西很少。</p>\n<p>当然，如果你现在想什么都不改就直接使用并且不在乎一些功能不正常的话，使用起来也是很简单的，只需要在你的 hexo 本地文件的博客主题文件中找到这个文件 <code>Layout.njk</code>  不同主题下的后缀名可能不一样，但是都是叫作 layout，文件路径一般位于： <code>博客根目录\\themes\\主题名\\layout\\_partials</code>  下，也有可能在另外的文件夹，如果找不到，就尝试在： <code>博客根目录\\themes\\主题名\\layout</code>  文件夹中搜索一下吧，然后我们打开 <code>Layout.njk</code> ，在 <code>&lt;head&gt;``&lt;/head&gt;</code>  之间或者 <code>&lt;body&gt;``&lt;/body&gt;</code>  之间加上这句话</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>就可以让你的博客在生成静态页面时自动加载该看板娘项目了，当然，这个使用的是别人仓库里的，不管怎么说，用着别人的东西总是给人一种怪怪的感觉，而且还不能修改。</p>\n<p>这个明明就可以自己搭建，所以我们接下来就讲讲怎么将这个自主化，这里我们需要用到 github 没用过的自己去注册，我是不太信看到这里的人还有没有用过 github 的，然后我们将别人做好的项目 fork 一份到我们自己的仓库，别人的项目也就是这个：</p>\n<p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget</span><br></pre></td></tr></table></figure></p>\n<p>到这里我们就算是初步的自主化了，我们如果需要修改看板娘的台词或者是位置什么的，就可以将我们刚刚 fork 过来的项目本地克隆一份，因为在本地修改会方便一些，当然你非要在网页上修改也不是不可以，修改项目里的 <code>waifu.css</code>  来更改看板娘的位置以及大小，修改 <code>waifu-tips.json</code>  来修改看板娘对话的语句以及触发方式。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/04.png\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/05.png\" alt=\"1\" /></p>\n<p>修改完成之后我们就可以上传了，当然，因为天朝网络的原因，加载这个应该会有不低的延迟，所以我们可以采用另一种办法来快速本地调试，也就是我们将这个项目本地化，将该项目下载下来重命名好之后放在 <code>博客根目录\\themes\\主题名\\source</code>  下，然后将在 <code>&lt;head&gt;``&lt;/head&gt;</code>  之间或者 <code>&lt;body&gt;``&lt;/body&gt;</code>  之间加上的话改为</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后我们就可以更加方便的调试看板娘了，这个时候，如果你和我一样，hexo 博客是直接部署在了 github 上，并且没有自己去用后端跑看板娘的 api，我们就会发现，看板娘的换装功能失效啦，哈哈，就是这个问题一直困扰着我，我搜索了很多都没有找到问题出现的原因，后来在我这次排查问题的过程中，我注意到了看板娘的 api，意识到了可能是这个东西导致出了问题，于是我很开心的去将 api 的项目 fork 了一份，然后去修改，这里是 api 的项目地址</p>\n<p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/fghrsh/live2d_api</span><br></pre></td></tr></table></figure></p>\n<p>按照说明的目录结构，我发现了问题所在，是因为我没有用后端去跑 api，也就导致了，不会生成出模型的 <code>textures.cache</code> ，从而也就不能获取到模型资源，只能加载默认的外观，不用后端服务器的 api 装配方式也能实现换装的解决办法就是将模型装配模式由 <code>单模型 多组皮肤</code> 转换为 <code>同分组 多个模型</code> 。</p>\n<p>这个办法也是我找到的另一篇教程提出的，这里是教程的地址</p>\n<p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://akilar.top/posts/5b8f515f/</span><br></pre></td></tr></table></figure></p>\n<p>我之前也想过按照 api 项目描述文件的结构来更改 <code>index.json</code>  文件，但是我是将所有的配件都写在了默认配置下，这也就导致了有些模型生成出来非常的克系，有很多条手和腿之类的。。。</p>\n<p>后面还是按照上面的教程来更改了 api 项目，这也成功使得换装功能正常实现，就是不能够顺序换装而已，其实也是能够实现的，只需要更改 <code>waifu-tips.js</code>  这个文件中那个随机换装的语句就可以了，但是我懒得弄了，反正换装都实现了，而且每次进去都能看到不同的换装，这不是也挺好的。</p>\n<p>修改完 api 项目之后，我们需要更改 l2d 项目里的 <code>autoload.js</code>  文件，将 cdnPath 改成修改后 api 项目的地址。</p>\n<p>其实也可以直接将这个本地化，我们需要下载 api 项目同样可以放在： <code>博客根目录\\themes\\主题名\\source</code>  下，同样，将上一步执行的修改变成相对地址就好了，如图</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/06.png\" alt=\"1\" /></p>\n<p>但是我使用的这个主题有点不太兼容这样，所以我只能将 api 项目以及 l2d 的本体项目都放在了 <code>博客根目录\\public</code>  文件夹下，这样才能保证了所有功能的正常使用，而且每次我执行</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<p>或者</p>\n<p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></p>\n<p>的时候，他都会给我 public 里放的这两个文件夹删掉，就很难受，我就只能每次生成完再重新复制进去，但是推送到远端的时候就是正常的，反正功能正常就不去深究那些了</p>\n<p>最后就是关于博客的访问次数了，这个我早就想加了，但是网上的教程乱七八糟的，我使用的这个主题又没有集成这个，这也就导致我一直没办法实现这个功能，今天，我突然看到了这个网址</p>\n<p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://moe-counter.glitch.me/</span><br></pre></td></tr></table></figure></p>\n<p>发现这个意外的好像很好用，效果大概是这样的</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/07.png\" alt=\"1\" /></p>\n<p>他还有很多不同的主题可以更换，</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.4/jiaocheng/2/08.png\" alt=\"1\" /></p>\n<p>这就很好了阿，我大概琢磨了一下，我想给他加到页脚上，发现只需要在主题文件夹下的 <code>footer.njk</code>  文件里增添上这样一段代码就可以了</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;miao&quot;&gt;</span><br><span class=\"line\">\t&lt;<span class=\"selector-tag\">img</span> <span class=\"attribute\">src</span>=&quot;https://count.getloli.com/get/@:name<span class=\"string\">&quot; alt=&quot;</span>:name<span class=\"string\">&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里唯一需要注意的就是看看你使用的 name 是否有重复的，只需要点进去看看是不是从 0 开始计数的就可以了，到这里最后的一点问题也就解决了，到此，博客的翻新也就算是成功了，可喜可贺可喜可贺，写到这里已经是 2024.2.21 的凌晨三点半了，终于摸完了这篇翻新记录，也算是心得吧，挺好，马上就要开学了。。算了剩下想写的就再放到其他的随笔里吧。</p>\n",
            "tags": [
                "学习&技术"
            ]
        },
        {
            "id": "http://simoxdcs.github.io/2024/01/27/jiaocheng/G502%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/",
            "url": "http://simoxdcs.github.io/2024/01/27/jiaocheng/G502%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/",
            "title": "G502折腾记录",
            "date_published": "2024-01-27T09:35:29.000Z",
            "content_html": "<p>鼠标型号是 Logitech G502 LightSpeed, 买这个鼠标之前一直用的是那种淘宝上 20 块的英菲克鼠标，更换的原因也很简单，有线鼠标在用的时候总是会因为不小心碰到线而导致断触一下，这就导致你在使用的过程中非常的不爽，因此开始寻找一个好用的无线鼠标，当时在酷安以及贴吧等地方看了不少评测，之后还是听了同学说罗技的鼠标挺好用的，就去看了看，当时一眼就看中了 G502 的外观，真的是很好看如下图所示：</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/65b51fec871b83018af5d913.webp\" alt=\"1\" /></p>\n<p><img data-src=\"https://pic.imgdb.cn/item/65b52042871b83018af78d05.webp\" alt=\"2\" /></p>\n<p>然后就去了解了一下 g502 的性能以及优缺点，优点是有极其丰富的可编程按键以及拥有无极滚轮，主要的缺点就是鼠标太重了，但是我其实并不是很在乎这个，<s>所以四舍五入就等于没有缺点</s>，故而就下单了一个，之后的使用过程也很愉快，但是用久了之后鼠标侧面的亲肤材质硅胶会被汗液腐蚀，虽然我手汗并不严重，也可能是我鼠标的抓握姿势问题，我鼠标侧面的硅胶就磨出来了一个大洞，以至于已经透过洞看见内壳了，迫于无奈买了一层鼠标贴纸贴在上面，这个是在 2021 年 8 月的时候买的，如下图</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/65b5253e871b83018a10cc36.jpg\" alt=\"1\" /></p>\n<p>当时贴上去用的时候确实很好看，感觉像是换了一个新鼠标一样，也很大程度上延缓了鼠标的磨损，但是好景不长，贴纸毕竟是使用胶来固定的，时间一长 ，在使用的过程中胶就会溢出，然后导致贴纸偏移，这也使得我不得不撕去一些贴纸，然后侧面的硅胶磨损就继续，终于在今天严重到了不得不去更换一个外壳的地步，其实我早就有了更换外壳的想法，但是之前在网上一直没有见到售卖无线版外壳的，只有有线版，但是有线版与无线版的外壳总成并不通用，就在前几天刚好发现了新上架了无线版的外壳，于是就果断下单购买了，顺便也购买了静音微动，因为我也想换成静音的鼠标，刚好就这这个机会一起实现了。</p>\n<p>下面是前期的工具准备：</p>\n<p>电烙铁、吸锡器或者吸锡带、松香、焊锡丝、耐高温海绵、适用小型螺丝的改锥、新的鼠标外壳以及要更换的微动。如下图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/10.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/25.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/26.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/5.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/24.jpg\" alt=\"1\" /></p>\n<p>准备完毕之后就可以开始拆解了，（拆解的时候记得要分类拆下来的螺丝，因为螺丝很多，大概在 25 个上下），将脚贴撕掉之后先拆除四个较大的外壳螺丝，之后取下外壳，</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/23.jpg\" alt=\"1\" /></p>\n<p>断开上板与下板之间的两条连线以及电池连线，下板部分就算是拆解完成，可以放在一边不用管了，</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/1.jpg\" alt=\"1\" /></p>\n<p>电池的连接线比较难取下来可以直接将电池从上壳中取出，与下壳连在一起也没关系</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/27.jpg\" alt=\"1\" /></p>\n<p>之后麻烦的是上板部分，要先拆除主板的 9 个螺丝，之后拆除固定外壳的五颗螺丝，取下外侧上壳，</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/4.jpg\" alt=\"1\" /></p>\n<p>取掉上壳之后就能看见一个灯罩和灯罩旁边的两个孔，这里一共有 5 个螺丝，固定着灯罩、鼠标主副键与上壳</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/2.jpg\" alt=\"1\" /></p>\n<p>将这部分拆下来之后你就会得到这三部分：</p>\n<p>副板与滚轮</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/17.jpg\" alt=\"1\" /></p>\n<p>外壳部分</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/20.jpg\" alt=\"1\" /></p>\n<p>上主板部分（因为当时拆下来没有拍照只能用这张代替着）</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/21.jpg\" alt=\"1\" /></p>\n<p>此时可以将鼠标上主板的滚轮键和竖轴拆解下来，记得小心滚轮下面有两个很小的弹簧，不要丢掉了</p>\n<p>这部分拆解成功之后就可以得到我们需要更换微动的上主板了，</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/7.jpg\" alt=\"1\" /></p>\n<p>这一步之后就是简单的拆焊以及重新焊接了，先给烙铁挂上松香之后去加热主板然后拔下原装微动，之后用吸锡器或者吸锡带除去原有的锡，将新微动摆好之后可以重新焊锡，要注意这里我使用的凯华静音黄点微动要比原来的微动宽一些，但是不太影响，还有就是有两个键高度要比原来的高上一些，我是通过打磨掉一层的方式来使得新微动能够正常使用的，可以根据具体情况来判断是否需要打磨</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/12.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/9.jpg\" alt=\"1\" /></p>\n<p>附上原装的微动</p>\n<p>侧键微动</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/22.jpg\" alt=\"1\" /></p>\n<p>主键微动</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/13.jpg\" alt=\"1\" /></p>\n<p>本来是想把所有的按键都换成静音微动的，但是拆下来之后发现侧板的三个按键的微动是这样的</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/8.jpg\" alt=\"1\" /></p>\n<p>并不能使用我购买的微动，所以就没用更换，不过也不算太影响吧，毕竟按的次数也不是特别多</p>\n<p>焊接好之后就开始安装上主板，装好之后就是这样的</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/21.jpg\" alt=\"1\" /></p>\n<p>接下来就是新外壳的更换，更换的过程中一定要记得那几个侧键的安装，因为装起来真的很麻烦，这鼠标的设计真的很复杂，拆装都很麻烦，尤其要注意一点，在鼠标主副键的下方有这样两个结构</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/15.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/18.jpg\" alt=\"1\" /></p>\n<p>要从旧的外壳上拆下来这两个小弹簧</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/3.jpg\" alt=\"1\" /></p>\n<p>我就是这两个弹簧没装导致装好之后发现手感不对，按键还有晃动的情况，然后又重新拆开安装了一边，很讨厌，千万要记得这一步</p>\n<p>之后就没有什么需要特别注意的地方了，将之前拆卸下来的东西都重新安装回去就可以了</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/11.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/6.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/16.jpg\" alt=\"1\" /></p>\n<p>到这里鼠标的改造就算是大获成功了，可喜可贺可喜可贺，放两张鼠标新旧外壳的对比图</p>\n<p>旧</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/14.jpg\" alt=\"1\" /></p>\n<p>这里我已经使用了贴纸贴上要不然更难看，就像这样</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/65b5556f871b83018ab693f7.jpg\" alt=\"1\" /></p>\n<p>新</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/5.jpg\" alt=\"1\" /></p>\n<p>最后放两张淬火刀头（</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/19.jpg\" alt=\"1\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/simoxdcs/csgo@2.3/jiaocheng/1/28.jpg\" alt=\"1\" /></p>\n<p>好，本篇教程到此结束，过几天更新一篇翻新博客以及看板娘的过程以及心得。</p>\n",
            "tags": [
                "学习&技术"
            ]
        },
        {
            "id": "http://simoxdcs.github.io/2022/01/29/xuexi/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "http://simoxdcs.github.io/2022/01/29/xuexi/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "c++学习笔记",
            "date_published": "2022-01-29T04:03:38.000Z",
            "content_html": "<p>下学期就要开始学面向对象的程序设计了，也就是相当于上上学期的程序设计的 c++ 版本，所以还是要认真的对待一下这个，毕竟还是要自己好好的提升一下自己的程序能力啊。不能再继续摆了。。。开整</p>\n<p>这个题目给我看了半天才看懂，好家伙，我本来以为说的是要让我实现里面要求的功能，结果看完之后发现实际上要求的是得把他题目附加的两个条件满足了，也就是说虽然题目中没有明确写出他的那些操作指令的具体实现过程，但是我们默认是已经实现了的，同时我们需要在附加条件中实现所需要的另外两个要求 (单项链表、堆栈、队列三选二)，然后最重要的是要体现代码重用的思想，也就是我们需要尽量使用之前所写出来的那些指令，通过改造来实现后两种的基础指令合集。</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）\t至少实现堆栈、队列、单向链表中的两个类型（包括数据结构类型名、基本操作集合）；</span><br><span class=\"line\">2）\t实现语言不限； </span><br><span class=\"line\">对于要实现的每个类型，你也可以使用 C 的 struct 定义其结构，全局函数定义其操作；</span><br><span class=\"line\">3）\t要体现“模块”划分、模块与源程序文件的对应关系；</span><br><span class=\"line\"> 应在提交的解答中进行说明，不要让老师猜测！！！</span><br><span class=\"line\">4）\t要体现“代码重用”的思想（即使用/调用 已有的数据结构、函数等）。</span><br><span class=\"line\">重用的一种表现之举例：</span><br><span class=\"line\">就像你调用C语言例程库中的 fopen、fclose、fprintf等函数那样，你实际在重用这些函数，来实现你所需要的功能。</span><br><span class=\"line\">5）\t应给出必要的说明（注释），便于老师理解批阅。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>就是上面的这段话。。。。</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">struct</span>  <span class=\"title class_\">Dlist</span> &#123;        <span class=\"comment\">// 双向链表结点的数据结构</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * prev; <span class=\"comment\">// 当前结点的前驱结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * next; <span class=\"comment\">// 当前结点的后继结点</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>   appValue;  <span class=\"comment\">// 这是应用数据，假设仅接受非负整数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表操作1：newDlist</span></span><br><span class=\"line\"><span class=\"comment\">//  生成一个双向链表的第一个结点，其中存储了整数 n。</span></span><br><span class=\"line\"><span class=\"comment\">//  返回指向该结点的指针。该指针将用作后续各函数的参数。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * <span class=\"built_in\">newDlist</span>(<span class=\"type\">int</span> n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 下面函数的参数中， ptrList 为指向链表表头结点的指针 */</span></span><br><span class=\"line\"><span class=\"comment\">//链表操作2：addFirst</span></span><br><span class=\"line\"><span class=\"comment\">//  将整数 n 插入到双向链表的最前面，即为链表添加新的头结点，其中存储n。</span></span><br><span class=\"line\"><span class=\"comment\">//  返回指向新的头结点的指针。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * <span class=\"built_in\">addFirst</span>(<span class=\"keyword\">struct</span> Dlist * ptrList, <span class=\"type\">int</span> n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表操作3：append</span></span><br><span class=\"line\"><span class=\"comment\">//  将整数 n 追加到链表末尾，即增加新的尾结点，其中存储 n 。</span></span><br><span class=\"line\"><span class=\"comment\">//  返回指向新的尾结点指针。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * <span class=\"built_in\">append</span>(<span class=\"keyword\">struct</span> Dlist * ptrList,  <span class=\"type\">int</span> n);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表操作4：removeHead</span></span><br><span class=\"line\"><span class=\"comment\">//  删除链表头结点，返回指向新的头结点指针。</span></span><br><span class=\"line\"><span class=\"comment\">//  若删除前 or 删除后链表为空，则返回 NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * <span class=\"built_in\">removeHead</span>(<span class=\"keyword\">struct</span> Dlist * ptrList);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表操作5：removeTail</span></span><br><span class=\"line\"><span class=\"comment\">//  删除链表尾结点，返回指向新的尾结点的指针。</span></span><br><span class=\"line\"><span class=\"comment\">//  若删除前 or 删除后链表为空，则返回 NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dlist</span> * <span class=\"built_in\">removeTail</span>(<span class=\"keyword\">struct</span> Dlist * ptrList);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表操作6：sizeOfDlist</span></span><br><span class=\"line\"><span class=\"comment\">//  返回链表中包含的结点个数，若链表为空（ptrList==NULL）则返回0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">sizeOfDlist</span><span class=\"params\">(<span class=\"keyword\">struct</span> Dlist * ptrList)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//链表操作7：destroyDlist</span></span><br><span class=\"line\"><span class=\"comment\">//  销毁链表整体并释放其占用的内存空间，若链表为空则什么也不做</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">destroyDlist</span><span class=\"params\">(<span class=\"keyword\">struct</span> Dlist * ptrList)</span></span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>这是给出的代码片段，现在就开始实现吧。。</p>\n<p>首先开始实现最简单的单项链表：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">linklist</span></span><br><span class=\"line\">&#123;<span class=\"comment\">//单项列表的数据结构</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;<span class=\"comment\">//用来储存数据</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">linklist</span> *next;<span class=\"comment\">//指向下一节点的指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//链表操作1：new</span></span><br><span class=\"line\"><span class=\"comment\">//  生成一个双向链表的第一个结点，其中存储了整数 n。</span></span><br><span class=\"line\"><span class=\"comment\">//  返回指向该结点的指针。该指针将用作后续各函数的参数。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span>  <span class=\"title class_\">linklist</span> *<span class=\"built_in\">newlist</span>(<span class=\"type\">int</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    linklist *head = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    head = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    head-&gt;data = n;</span><br><span class=\"line\">    head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 下面函数的参数中， hdlist 为指向链表表头结点的指针 */</span></span><br><span class=\"line\"><span class=\"comment\">//链表操作2：addhead</span></span><br><span class=\"line\"><span class=\"comment\">//  将整数 n 插入到单向链表的最前面，即为链表添加新的头结点，其中存储n。</span></span><br><span class=\"line\"><span class=\"comment\">//  返回指向新的头结点的指针。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">linklist</span> *<span class=\"built_in\">addhead</span>(<span class=\"keyword\">struct</span> linklist *hdlist, <span class=\"type\">int</span> n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    linklist *p = <span class=\"literal\">NULL</span>;<span class=\"comment\">//创建新节点</span></span><br><span class=\"line\">    p = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    p-&gt;next = hdlist;<span class=\"comment\">//让新创建的节点插入到表头上</span></span><br><span class=\"line\">    p-&gt;data = n;<span class=\"comment\">//赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hdlist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//链表操作3：addend</span></span><br><span class=\"line\"><span class=\"comment\">//  将整数 n 追加到链表末尾，即增加新的尾结点，其中存储 n 。</span></span><br><span class=\"line\"><span class=\"comment\">//  返回指向新的尾结点指针。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">linklist</span> *<span class=\"built_in\">addend</span>(<span class=\"keyword\">struct</span> linklist *last, <span class=\"type\">int</span> n)<span class=\"comment\">//last为指向尾节点的指针</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    linklist *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    last-&gt;next = p;</span><br><span class=\"line\">    p-&gt;data = n;</span><br><span class=\"line\">    last = last-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//链表操作4：removeHead</span></span><br><span class=\"line\"><span class=\"comment\">//  删除链表头结点，返回指向新的头结点指针。</span></span><br><span class=\"line\"><span class=\"comment\">//  若删除前 or 删除后链表为空，则返回 NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">linklist</span> *<span class=\"built_in\">rmhead</span>(<span class=\"keyword\">struct</span> linklist *hdlist)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hdlist-&gt;next==<span class=\"literal\">NULL</span>&amp;&amp;hdlist==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//检查前后链表是否为空</span></span><br><span class=\"line\">    linklist *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    p= hdlist-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(hdlist);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//链表操作5：removeTail</span></span><br><span class=\"line\"><span class=\"comment\">//  删除链表尾结点，返回指向新的尾结点的指针。</span></span><br><span class=\"line\"><span class=\"comment\">//  若删除前 or 删除后链表为空，则返回 NULL。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">linklist</span> *<span class=\"built_in\">rmend</span>(<span class=\"keyword\">struct</span> linklist *hdlist)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    linklist *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    linklist *q = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    q = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    p = hdlist;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//找到尾节点p</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q-&gt;next!=p)&#123;</span><br><span class=\"line\">        q = q-&gt;next;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//找到尾节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q== <span class=\"literal\">NULL</span>&amp;&amp;p== <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//检查前后链表是否为空</span></span><br><span class=\"line\">    q-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);<span class=\"comment\">//释放空间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> q;<span class=\"comment\">//返回指向尾节点的指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//链表操作6：sizeOfDlist</span></span><br><span class=\"line\"><span class=\"comment\">//  返回链表中包含的结点个数，若链表为空（ptrList==NULL）则返回0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumlist</span><span class=\"params\">(<span class=\"keyword\">struct</span> linklist *hdlist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">1</span>;<span class=\"comment\">//定义整数类型用来统计节点个数</span></span><br><span class=\"line\">    linklist *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    p = hdlist;<span class=\"comment\">//不改变头节点指针的情况下来进行遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        sum += <span class=\"number\">1</span>;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//链表操作7：destroyDlist</span></span><br><span class=\"line\"><span class=\"comment\">//  销毁链表整体并释放其占用的内存空间，若链表为空则什么也不做</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dylist</span><span class=\"params\">(<span class=\"keyword\">struct</span> linklist *hdlist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hdlist==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//判断条件</span></span><br><span class=\"line\">    linklist *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p = (linklist *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(linklist));</span><br><span class=\"line\">    p = hdlist-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(hdlist);</span><br><span class=\"line\">    <span class=\"built_in\">dylist</span>(p);<span class=\"comment\">//递归直至链表删除完成</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>感觉这个就是基本上把功能什么的东西全都自己实现了一遍嘛。。。。虽然说好多东西自己写的时候还是忘掉了，然后就边写边查，姑且算是把东西都写出来了。<s>话说也不是很难嘛</s></p>\n<p>然后就就是开始写堆栈了，按道理来说，我连单项链表都写出来了，这个应该是更简单啊，结果写了半天还有点小问题一直在报错。。。怪，最后到截止日期都没改好。。不管了，姑且就这样子交上去吧。。。下面是代码</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 50  <span class=\"comment\">//定义栈中元素的最大个数</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;   <span class=\"comment\">//ElemType的类型根据实际情况而定，这里假定为int</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SqStack</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;    <span class=\"comment\">//用于栈顶指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SqStack</span> *<span class=\"built_in\">zhaninit</span>(SqStack *S)&#123;</span><br><span class=\"line\">    S-&gt;top = <span class=\"number\">-1</span>;    <span class=\"comment\">//初始化栈顶指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">StackEmpty</span><span class=\"params\">(SqStack S)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>)&#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    <span class=\"comment\">//栈空</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   <span class=\"comment\">//不空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*插入元素e为新的栈顶元素*/</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Push</span>(SqStack *S, ElemType e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//满栈</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top == MAXSIZE<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S-&gt;top++;   <span class=\"comment\">//栈顶指针增加一</span></span><br><span class=\"line\">    S-&gt;data[S-&gt;top] = e;    <span class=\"comment\">//将新插入元素赋值给栈顶空间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR*/</span></span><br><span class=\"line\"><span class=\"function\">Status <span class=\"title\">Pop</span><span class=\"params\">(SqStack *S, ElemType *e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *e = S-&gt;data[S-&gt;top];   <span class=\"comment\">//将要删除的栈顶元素赋值给e</span></span><br><span class=\"line\">    S-&gt;top--;   <span class=\"comment\">//栈顶指针减一</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*读栈顶元素*/</span></span><br><span class=\"line\"><span class=\"function\">Status <span class=\"title\">GetTop</span><span class=\"params\">(SqStack S, ElemType *e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top == <span class=\"number\">-1</span>)&#123;   <span class=\"comment\">//栈空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *e = S-&gt;data[S-&gt;top];   <span class=\"comment\">//记录栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "学习&技术"
            ]
        },
        {
            "id": "http://simoxdcs.github.io/2020/12/14/xuexi/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://simoxdcs.github.io/2020/12/14/xuexi/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2020-12-14T07:25:26.000Z",
            "content_html": "<h3 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h3>\n<p>排序算法啊。。这是个数组里面常用的一种东西。。但是我一直 <s>（懒得去记）</s> 没记住这个算法。。而且最近写的题目总是时间超时。。算法复杂度太高。。就是两个 <code>for</code>  套在了一起。。现在为了方便记忆～～(偷懒)~~ 现在总结一下几个常见的排序算法；</p>\n<h4 id=\"冒泡排序法\"><a class=\"anchor\" href=\"#冒泡排序法\">#</a> 冒泡排序法</h4>\n<p>这个就是复杂度 <code>o(n^2^)</code>  的一种</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,s=<span class=\"number\">0</span>,t,k,n=<span class=\"number\">7</span>,a[<span class=\"number\">7</span>]=&#123;<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;n-i<span class=\"number\">-1</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[j]&gt;a[j+<span class=\"number\">1</span>])<span class=\"comment\">//从小到大</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t=a[j];a[j]=a[j+<span class=\"number\">1</span>];a[j+<span class=\"number\">1</span>]=t;s=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>性质：1、时间复杂度： <code>O(n2)</code>   2、空间复杂度： <code>O(1)</code>   3、稳定排序  4、原地排序</p>\n<h4 id=\"选择排序法\"><a class=\"anchor\" href=\"#选择排序法\">#</a> 选择排序法</h4>\n<p>同上为 <code>o(n^2^)</code>  的算法</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i,j,s=<span class=\"number\">0</span>,t,k,n=<span class=\"number\">7</span>,a[<span class=\"number\">7</span>]=&#123;<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=i+<span class=\"number\">1</span>,k=i;j&lt;n;j++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[j]&lt;a[k]) k=j;<span class=\"comment\">//从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k!=i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tt=a[i];a[i]=a[k];a[k]=t;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>性质：1、时间复杂度： <code>O(n2)</code>  2、空间复杂度： <code>O(1)</code>   3、非稳定排序  4、原地排序</p>\n<h4 id=\"快速排序法\"><a class=\"anchor\" href=\"#快速排序法\">#</a> 快速排序法</h4>\n<p>这个就比较厉害了。。这个是算法复杂度 <code>O(nlogn)</code>  的算法。。就很不错</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">2</span>     <span class=\"keyword\">public</span> <span class=\"type\">static</span> <span class=\"type\">int</span>[] <span class=\"built_in\">quickSort</span>(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right) &#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>         <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\"> <span class=\"number\">4</span>             <span class=\"comment\">//获取中轴元素所处的位置</span></span><br><span class=\"line\"> <span class=\"number\">5</span>             <span class=\"type\">int</span> mid = <span class=\"built_in\">partition</span>(arr, left, right);</span><br><span class=\"line\"> <span class=\"number\">6</span>             <span class=\"comment\">//进行分割</span></span><br><span class=\"line\"> <span class=\"number\">7</span>             arr = <span class=\"built_in\">quickSort</span>(arr, left, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"number\">8</span>             arr = <span class=\"built_in\">quickSort</span>(arr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"> <span class=\"number\">9</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"><span class=\"number\">11</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">12</span> </span><br><span class=\"line\"><span class=\"number\">13</span>     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"number\">14</span>         <span class=\"comment\">//选取中轴元素</span></span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"type\">int</span> pivot = arr[left];</span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"type\">int</span> i = left + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"type\">int</span> j = right;</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">19</span>             <span class=\"comment\">// 向右找到第一个小于等于 pivot 的元素位置</span></span><br><span class=\"line\"><span class=\"number\">20</span>             <span class=\"keyword\">while</span> (i &lt;= j &amp;&amp; arr[i] &lt;= pivot) i++;</span><br><span class=\"line\"><span class=\"number\">21</span>             <span class=\"comment\">// 向左找到第一个大于等于 pivot 的元素位置</span></span><br><span class=\"line\"><span class=\"number\">22</span>             <span class=\"keyword\">while</span>(i &lt;= j &amp;&amp; arr[j] &gt;= pivot ) j--;</span><br><span class=\"line\"><span class=\"number\">23</span>             <span class=\"keyword\">if</span>(i &gt;= j)</span><br><span class=\"line\"><span class=\"number\">24</span>                 <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"number\">25</span>             <span class=\"comment\">//交换两个元素的位置，使得左边的元素不大于pivot,右边的不小于pivot</span></span><br><span class=\"line\"><span class=\"number\">26</span>             <span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\"><span class=\"number\">27</span>             arr[i] = arr[j];</span><br><span class=\"line\"><span class=\"number\">28</span>             arr[j] = temp;</span><br><span class=\"line\"><span class=\"number\">29</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">30</span>         arr[left] = arr[j];</span><br><span class=\"line\"><span class=\"number\">31</span>         <span class=\"comment\">// 使中轴元素处于有序的位置</span></span><br><span class=\"line\"><span class=\"number\">32</span>         arr[j] = pivot;</span><br><span class=\"line\"><span class=\"number\">33</span>         <span class=\"keyword\">return</span> j;</span><br><span class=\"line\"><span class=\"number\">34</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">35</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>性质：1、时间复杂度： <code>O(nlogn) </code>  2、空间复杂度： <code>O(logn)</code>   3、非稳定排序  4、原地排序</p>\n<h4 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h4>\n<p>这就是另一个 <code>O(nlogn)</code>  复杂度的排序算法</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Head</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">2</span>     <span class=\"comment\">// 堆排序</span></span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">public</span> <span class=\"type\">static</span> <span class=\"type\">int</span>[] <span class=\"built_in\">headSort</span>(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\"> <span class=\"number\">4</span>         <span class=\"type\">int</span> n = arr.length;</span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"comment\">//构建大顶堆</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = (n - <span class=\"number\">2</span>) / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"> <span class=\"number\">7</span>             <span class=\"built_in\">downAdjust</span>(arr, i, n - <span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"number\">8</span>         &#125;</span><br><span class=\"line\"> <span class=\"number\">9</span>         <span class=\"comment\">//进行堆排序</span></span><br><span class=\"line\"><span class=\"number\">10</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\"><span class=\"number\">11</span>             <span class=\"comment\">// 把堆顶元素与最后一个元素交换</span></span><br><span class=\"line\"><span class=\"number\">12</span>             <span class=\"type\">int</span> temp = arr[i];</span><br><span class=\"line\"><span class=\"number\">13</span>             arr[i] = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"number\">14</span>             arr[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\"><span class=\"number\">15</span>             <span class=\"comment\">// 把打乱的堆进行调整，恢复堆的特性</span></span><br><span class=\"line\"><span class=\"number\">16</span>             <span class=\"built_in\">downAdjust</span>(arr, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">17</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"><span class=\"number\">19</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"comment\">//下沉操作</span></span><br><span class=\"line\"><span class=\"number\">22</span>     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">downAdjust</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> parent, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"number\">23</span>         <span class=\"comment\">//临时保存要下沉的元素</span></span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"type\">int</span> temp = arr[parent];</span><br><span class=\"line\"><span class=\"number\">25</span>         <span class=\"comment\">//定位左孩子节点的位置</span></span><br><span class=\"line\"><span class=\"number\">26</span>         <span class=\"type\">int</span> child = <span class=\"number\">2</span> * parent + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">27</span>         <span class=\"comment\">//开始下沉</span></span><br><span class=\"line\"><span class=\"number\">28</span>         <span class=\"keyword\">while</span> (child &lt;= n) &#123;</span><br><span class=\"line\"><span class=\"number\">29</span>             <span class=\"comment\">// 如果右孩子节点比左孩子大，则定位到右孩子</span></span><br><span class=\"line\"><span class=\"number\">30</span>             <span class=\"keyword\">if</span>(child + <span class=\"number\">1</span> &lt;= n &amp;&amp; arr[child] &lt; arr[child + <span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"number\">31</span>                 child++;</span><br><span class=\"line\"><span class=\"number\">32</span>             <span class=\"comment\">// 如果孩子节点小于或等于父节点，则下沉结束</span></span><br><span class=\"line\"><span class=\"number\">33</span>             <span class=\"keyword\">if</span> (arr[child] &lt;= temp ) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"number\">34</span>             <span class=\"comment\">// 父节点进行下沉</span></span><br><span class=\"line\"><span class=\"number\">35</span>             arr[parent] = arr[child];</span><br><span class=\"line\"><span class=\"number\">36</span>             parent = child;</span><br><span class=\"line\"><span class=\"number\">37</span>             child = <span class=\"number\">2</span> * parent + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">38</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">39</span>         arr[parent] = temp;</span><br><span class=\"line\"><span class=\"number\">40</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">41</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>性质：1、时间复杂度： <code>O(nlogn)</code>   2、空间复杂度： <code>O(1)</code>   3、非稳定排序  4、原地排序</p>\n<h4 id=\"桶排序\"><a class=\"anchor\" href=\"#桶排序\">#</a> 桶排序</h4>\n<p>桶排序就是把最大值和最小值之间的数进行瓜分，例如分成  10 个区间，10 个区间对应 10 个桶，我们把各元素放到对应区间的桶中去，再对每个桶中的数进行排序，可以采用归并排序，也可以采用快速排序之类的。</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BucketSort</span> &#123;</span><br><span class=\"line\"> <span class=\"number\">2</span>     <span class=\"keyword\">public</span> <span class=\"type\">static</span> <span class=\"type\">int</span>[] <span class=\"built_in\">BucketSort</span>(<span class=\"type\">int</span>[] arr) &#123;</span><br><span class=\"line\"> <span class=\"number\">3</span>         <span class=\"keyword\">if</span>(arr == null || arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"> <span class=\"number\">4</span> </span><br><span class=\"line\"> <span class=\"number\">5</span>         <span class=\"type\">int</span> n = arr.length;</span><br><span class=\"line\"> <span class=\"number\">6</span>         <span class=\"type\">int</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"> <span class=\"number\">7</span>         <span class=\"type\">int</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"> <span class=\"number\">8</span>         <span class=\"comment\">// 寻找数组的最大值与最小值</span></span><br><span class=\"line\"> <span class=\"number\">9</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\"><span class=\"number\">10</span>             <span class=\"keyword\">if</span>(min &gt; arr[i])</span><br><span class=\"line\"><span class=\"number\">11</span>                 min = arr[i];</span><br><span class=\"line\"><span class=\"number\">12</span>             <span class=\"keyword\">if</span>(max &lt; arr[i])</span><br><span class=\"line\"><span class=\"number\">13</span>                 max = arr[i];</span><br><span class=\"line\"><span class=\"number\">14</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">15</span>         <span class=\"comment\">//和优化版本的计数排序一样，弄一个大小为 min 的偏移值</span></span><br><span class=\"line\"><span class=\"number\">16</span>         <span class=\"type\">int</span> d = max - min;</span><br><span class=\"line\"><span class=\"number\">17</span>         <span class=\"comment\">//创建 d / 5 + 1 个桶，第 i 桶存放  5*i ~ 5*i+5-1范围的数</span></span><br><span class=\"line\"><span class=\"number\">18</span>         <span class=\"type\">int</span> bucketNum = d / <span class=\"number\">5</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">19</span>         ArrayList&lt;LinkedList&lt;Integer&gt;&gt; bucketList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(bucketNum);</span><br><span class=\"line\"><span class=\"number\">20</span>         <span class=\"comment\">//初始化桶</span></span><br><span class=\"line\"><span class=\"number\">21</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class=\"line\"><span class=\"number\">22</span>             bucketList.<span class=\"built_in\">add</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">LinkedList</span>&lt;Integer&gt;());</span><br><span class=\"line\"><span class=\"number\">23</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">24</span>         <span class=\"comment\">//遍历原数组，将每个元素放入桶中</span></span><br><span class=\"line\"><span class=\"number\">25</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\"><span class=\"number\">26</span>             bucketList.<span class=\"built_in\">get</span>((arr[i]-min)/d).<span class=\"built_in\">add</span>(arr[i] - min);</span><br><span class=\"line\"><span class=\"number\">27</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">28</span>         <span class=\"comment\">//对桶内的元素进行排序，我这里采用系统自带的排序工具</span></span><br><span class=\"line\"><span class=\"number\">29</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class=\"line\"><span class=\"number\">30</span>             Collections.<span class=\"built_in\">sort</span>(bucketList.<span class=\"built_in\">get</span>(i));</span><br><span class=\"line\"><span class=\"number\">31</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">32</span>         <span class=\"comment\">//把每个桶排序好的数据进行合并汇总放回原数组</span></span><br><span class=\"line\"><span class=\"number\">33</span>         <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">34</span>         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; bucketNum; i++) &#123;</span><br><span class=\"line\"><span class=\"number\">35</span>             <span class=\"keyword\">for</span> (Integer t : bucketList.<span class=\"built_in\">get</span>(i)) &#123;</span><br><span class=\"line\"><span class=\"number\">36</span>                 arr[k++] = t + min;</span><br><span class=\"line\"><span class=\"number\">37</span>             &#125;</span><br><span class=\"line\"><span class=\"number\">38</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">39</span>         <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"><span class=\"number\">40</span>     &#125;</span><br><span class=\"line\"><span class=\"number\">41</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>性质：1、时间复杂度： <code>O(n+k)</code>   2、空间复杂度： <code>O(n+k)</code>   3、稳定排序  4、非原地排序</p>\n<p>一会再写一个游记之类的东西。。。先写这么多。。快期末考试了。。恐惧。😨😨😨😨</p>\n",
            "tags": [
                "学习&技术"
            ]
        },
        {
            "id": "http://simoxdcs.github.io/2020/12/06/xuexi/MarkDown/",
            "url": "http://simoxdcs.github.io/2020/12/06/xuexi/MarkDown/",
            "title": "MarkDown",
            "date_published": "2020-12-06T08:22:26.000Z",
            "content_html": "<p>一级标题使用一个#</p>\n<h1 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h1>\n<p>二级标题用两个 ##</p>\n<h2 id=\"标题-2\"><a class=\"anchor\" href=\"#标题-2\">#</a> 标题</h2>\n<p>三级用三个</p>\n<h3 id=\"标题-3\"><a class=\"anchor\" href=\"#标题-3\">#</a> 标题</h3>\n<p>最多用到六级标题</p>\n<h4 id=\"标题-4\"><a class=\"anchor\" href=\"#标题-4\">#</a> 标题</h4>\n<h5 id=\"标题-5\"><a class=\"anchor\" href=\"#标题-5\">#</a> 标题</h5>\n<h6 id=\"标题-6\"><a class=\"anchor\" href=\"#标题-6\">#</a> 标题</h6>\n<p>#文字：</p>\n<p>发现了这个主题的一些好玩的东西</p>\n<p><span class=\"spoiler\" title=\"你知道得太多了\">黑幕黑幕黑幕黑幕黑幕黑幕</span> ： 鼠标滑过显示内容<br />\n<span class=\"spoiler bulr\" title=\"你知道得太多了\">模糊模糊模糊模糊模糊模糊</span> ： 选中文字显示内容</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容</span><br><span class=\"line\">!! 模糊模糊模糊模糊模糊模糊！！&#123;.bulr&#125; ： 选中文字显示内容</span><br></pre></td></tr></table></figure></p>\n<p>## 删除线：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就像这样<span class=\"code\">~~~删除线~~~</span>(使用波浪号，文字两边同时加上两个)</span><br></pre></td></tr></table></figure></p>\n<p><strong><s>文字</s></strong></p>\n<p>## 斜体 / 加粗 / 斜体加粗：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*文字*</span>(在文字两边加上一个<span class=\"emphasis\">*) </span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**文字**</span>(文字两边加上两个<span class=\"strong\">**)</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*文字*</span>**</span>（文字两边加上三个<span class=\"strong\">**<span class=\"emphasis\">*）</span></span></span><br></pre></td></tr></table></figure></p>\n<p>## 下划线：</p>\n<p>&lt;u&gt; 文字 &lt;/u&gt;  就像这样（快捷键是 Ctrl+U）代码是 &lt; u&gt;  &lt;/u&gt;</p>\n<p>## 高亮（需要打开扩展）：</p>\n<p><mark>文字</mark>  在文字两边加上两个 == 也可再加上斜体之类的效果</p>\n<p>## 下标（需要打开扩展）：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">H~2~O     H~2~O~2~</span><br></pre></td></tr></table></figure></p>\n<p>H<sub>2</sub>O       H<sub>2</sub>O<sub>2</sub></p>\n<p>## 上标（需要打开扩展）：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m^2^   m^3^</span><br></pre></td></tr></table></figure></p>\n<p>m<sup>2</sup>\tm<sup>3</sup></p>\n<p>#表情符号（emoji）：</p>\n<p>输入：会出现提示，如：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:smile:</span><br></pre></td></tr></table></figure></p>\n<p>😄</p>\n<p>#表格:</p>\n<p>用 <code>|</code>  来分不同的单元格，用 <code>-</code>  来分表头</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name | price</span><br><span class=\"line\">--- | ---</span><br><span class=\"line\">fried chicken | 19</span><br><span class=\"line\">cola|5</span><br></pre></td></tr></table></figure></p>\n<blockquote></blockquote>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fried chicken</td>\n<td>19</td>\n</tr>\n<tr>\n<td>cola</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用  <code>|</code>  来标记单元格边界，在表头下方的分隔线标记中加入  <code>:</code> ，即可标记下方单元格内容的对齐方式：</p>\n<p>也可用 ctrl + t 来快速创建</p>\n<p>#引用：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;文字</span><br><span class=\"line\"> &gt;文字</span><br></pre></td></tr></table></figure></p>\n<p>就像这样</p>\n<blockquote>\n<p>文字</p>\n<blockquote>\n<p>文字</p>\n</blockquote>\n</blockquote>\n<p>#列表：</p>\n<p>##（无序列表）：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> + enter</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>123</li>\n<li>321</li>\n</ul>\n<p>##（有序列表）：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 123</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 321</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>123</li>\n<li>321</li>\n</ol>\n<p>#代码：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```语言名称</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>## 行内代码：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`名称`</span></span><br></pre></td></tr></table></figure></p>\n<p>例如： <code>java</code> \t <code>c++</code></p>\n<p>#分割线：</p>\n<hr />\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">*** + enter 或者 --- +enter</span></span><br></pre></td></tr></table></figure></p>\n<p>#跳转：</p>\n<p>## 外部跳转：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">提示文字</span>](<span class=\"link\">要跳转的网址</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"www.baidu.com\">提示</a></p>\n<p>## 内部跳转（Typora 支持）：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">跳转</span>](<span class=\"link\">#标题</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"#%E6%A0%87%E9%A2%98\">跳转</a></p>\n<p>#自动链接：</p>\n<p>用 <code>&lt;&gt;</code>  包含的 ULR 会自动链接</p>\n<p><span class=\"exturl\" data-url=\"bWFpbHRvOnpodDIzMzQyMDA0NjNAZ21haWwuY29t\">zht2334200463@gmail.com</span></p>\n<p>#图片：</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片名称</span>](<span class=\"link\">图片网址或者本地路径</span>)   放在和文档一个文件夹内则直接输入图片名称即可\t也可以手动选择</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://s3.ax1x.com/2020/12/06/DjtwAs.jpg\" alt=\"嘿嘿\" /></p>\n<p>#快捷键：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Ctrl+1</td>\n<td style=\"text-align:left\">一阶标题</td>\n<td style=\"text-align:left\">Ctrl+B</td>\n<td style=\"text-align:left\">字体加粗</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+2</td>\n<td style=\"text-align:left\">二阶标题</td>\n<td style=\"text-align:left\">Ctrl+I</td>\n<td style=\"text-align:left\">字体倾斜</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+3</td>\n<td style=\"text-align:left\">三阶标题</td>\n<td style=\"text-align:left\">Ctrl+U</td>\n<td style=\"text-align:left\">下划线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+4</td>\n<td style=\"text-align:left\">四阶标题</td>\n<td style=\"text-align:left\">Ctrl+Home</td>\n<td style=\"text-align:left\">返回 Typora 顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+5</td>\n<td style=\"text-align:left\">五阶标题</td>\n<td style=\"text-align:left\">Ctrl+End</td>\n<td style=\"text-align:left\">返回 Typora 底部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+6</td>\n<td style=\"text-align:left\">六阶标题</td>\n<td style=\"text-align:left\">Ctrl+T</td>\n<td style=\"text-align:left\">创建表格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+L</td>\n<td style=\"text-align:left\">选中某句话</td>\n<td style=\"text-align:left\">Ctrl+K</td>\n<td style=\"text-align:left\">创建超链接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+D</td>\n<td style=\"text-align:left\">选中某个单词</td>\n<td style=\"text-align:left\">Ctrl+F</td>\n<td style=\"text-align:left\">搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl+E</td>\n<td style=\"text-align:left\">选中相同格式的文字</td>\n<td style=\"text-align:left\">Ctrl+H</td>\n<td style=\"text-align:left\">搜索并替换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Alt+Shift+5</td>\n<td style=\"text-align:left\">删除线</td>\n<td style=\"text-align:left\">Ctrl+Shift+I</td>\n<td style=\"text-align:left\">插入图片</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>无序列表：输入 - 之后输入空格</li>\n<li>有序列表：输入数字 +“.” 之后输入空格</li>\n<li>任务列表：-[空格] 空格 文字</li>\n<li>标题：ctrl + 数字</li>\n<li>表格：ctrl+t</li>\n<li>生成目录： <code>[TOC]</code>  按回车</li>\n<li>选中一整行：ctrl+l</li>\n<li>选中单词：ctrl+d</li>\n<li>选中相同格式的文字：ctrl+e</li>\n<li>跳转到文章开头：ctrl+home</li>\n<li>跳转到文章结尾：ctrl+end</li>\n<li>搜索：ctrl+f</li>\n<li>替换：ctrl+h</li>\n<li>引用：输入 &gt; 之后输入空格</li>\n<li>代码块：ctrl+alt+f</li>\n<li>加粗：ctrl+b</li>\n<li>倾斜：ctrl+i</li>\n<li>下划线：ctrl+u</li>\n<li>删除线：alt+shift+5</li>\n<li>插入图片：直接拖动到指定位置即可或者 ctrl+shift+i</li>\n<li>插入链接：ctrl + k</li>\n</ul>\n<h1 id=\"画图\"><a class=\"anchor\" href=\"#画图\">#</a> 画图：</h1>\n<h2 id=\"流程图\"><a class=\"anchor\" href=\"#流程图\">#</a> 流程图：</h2>\n<p>要在 Front Matter 中添加 <code>mermaid: true</code>  才可以</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```mermaid</span></span><br><span class=\"line\"><span class=\"code\">graph 方向描述</span></span><br><span class=\"line\"><span class=\"code\">TB 上到下</span></span><br><span class=\"line\"><span class=\"code\">BT 下到上</span></span><br><span class=\"line\"><span class=\"code\">RL 右到左</span></span><br><span class=\"line\"><span class=\"code\">LR 左到右</span></span><br><span class=\"line\"><span class=\"code\">graph TB;</span></span><br><span class=\"line\"><span class=\"code\">  A--&gt;B</span></span><br><span class=\"line\"><span class=\"code\">  B--&gt;C</span></span><br><span class=\"line\"><span class=\"code\">  C--&gt;A \t就是下面的图了</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\"> A--&gt;B;</span><br><span class=\"line\"> B--&gt;C;</span><br><span class=\"line\"> C--&gt;A;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"流程图常用符号及含义\"><a class=\"anchor\" href=\"#流程图常用符号及含义\">#</a> 流程图常用符号及含义</h4>\n<h5 id=\"节点形状\"><a class=\"anchor\" href=\"#节点形状\">#</a> 节点形状</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">表述</th>\n<th style=\"text-align:left\">说明</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">id [文字]</td>\n<td style=\"text-align:left\">矩形节点</td>\n<td>表示过程，也就是整个流程中的一个环节</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">id (文字)</td>\n<td style=\"text-align:left\">圆角矩形节点</td>\n<td>表示开始和结束</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">id ((文字))</td>\n<td style=\"text-align:left\">圆形节点</td>\n<td>表示连接。为避免流程过长或有交叉，可将流程切开。成对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\" 文字=\"\">id</td>\n<td style=\"text-align:left\">菱形节点</td>\n<td>表示判断、决策</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">id &gt; 文字]</td>\n<td style=\"text-align:left\">右向旗帜状节点</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>单向箭头线段</strong>：表示流程进行方向</p>\n<blockquote>\n<p>id 即为节点的唯一标识，A~F 是当前节点名字，类似于变量名，画图时便于引用</p>\n<p>括号内是节点中要显示的文字，默认节点的名字和显示的文字都为 A</p>\n</blockquote>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">  A</span><br><span class=\"line\">  B(圆角矩形节点)</span><br><span class=\"line\">  C[矩形节点]</span><br><span class=\"line\">  D((圆形节点))</span><br><span class=\"line\">  E&#123;菱形节点&#125;</span><br><span class=\"line\">  F&gt;右向旗帜状节点] </span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">  A</span><br><span class=\"line\">  B(圆角矩形节点)</span><br><span class=\"line\">  C[矩形节点]</span><br><span class=\"line\">  D((圆形节点))</span><br><span class=\"line\">  E&#123;菱形节点&#125;</span><br><span class=\"line\">  F&gt;右向旗帜状节点]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\"><span class=\"code\">    begin(出门)--&gt; buy[买炸鸡]</span></span><br><span class=\"line\"><span class=\"code\">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span></span><br><span class=\"line\"><span class=\"code\">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)</span></span><br><span class=\"line\"><span class=\"code\">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</span></span><br><span class=\"line\"><span class=\"code\">    </span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">    begin(出门)--&gt; buy[买炸鸡]</span><br><span class=\"line\">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><br><span class=\"line\">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack(回家)</span><br><span class=\"line\">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></p>\n<h5 id=\"连线\"><a class=\"anchor\" href=\"#连线\">#</a> 连线</h5>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">  A1--&gt;B1</span><br><span class=\"line\">  A2---B2</span><br><span class=\"line\">  A3--text---B3</span><br><span class=\"line\">  A4--text--&gt;B4</span><br><span class=\"line\">  A5-.-B5</span><br><span class=\"line\">  A6-.-&gt;B6</span><br><span class=\"line\">  A7-.text.-B7</span><br><span class=\"line\">  A8-.text.-&gt;B8</span><br><span class=\"line\">  A9===B9</span><br><span class=\"line\">  A10==&gt;B10</span><br><span class=\"line\">  A11==text===B11</span><br><span class=\"line\">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">  A1--&gt;B1</span><br><span class=\"line\">  A2---B2</span><br><span class=\"line\">  A3--text---B3</span><br><span class=\"line\">  A4--text--&gt;B4</span><br><span class=\"line\">  A5-.-B5</span><br><span class=\"line\">  A6-.-&gt;B6</span><br><span class=\"line\">  A7-.text.-B7</span><br><span class=\"line\">  A8-.text.-&gt;B8</span><br><span class=\"line\">  A9===B9</span><br><span class=\"line\">  A10==&gt;B10</span><br><span class=\"line\">  A11==text===B11</span><br><span class=\"line\">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\"> A ---B</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"子图表\"><a class=\"anchor\" href=\"#子图表\">#</a> 子图表</h5>\n<p>使用以下语法添加子图表</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subgraph 子图表名称</span><br><span class=\"line\"><span class=\"code\">    子图表中的描述语句...</span></span><br><span class=\"line\"><span class=\"code\">end</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\"><span class=\"code\">\t  subgraph 买炸鸡前</span></span><br><span class=\"line\"><span class=\"code\">   \t\t\t begin(出门)--&gt; buy[出门买炸鸡]</span></span><br><span class=\"line\"><span class=\"code\">    end</span></span><br><span class=\"line\"><span class=\"code\">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span></span><br><span class=\"line\"><span class=\"code\">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)</span></span><br><span class=\"line\"><span class=\"code\">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">\t  subgraph 买炸鸡前</span><br><span class=\"line\">   \t\t\t begin(出门)--&gt; buy[出门买炸鸡]</span><br><span class=\"line\">    end</span><br><span class=\"line\">    buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span><br><span class=\"line\">    IsRemaining --没有--&gt; sad[&quot;伤心&quot;]--&gt; goBack(回家)</span><br><span class=\"line\">    IsRemaining --&gt;|有|happy[买完炸鸡开心]--&gt; goBack</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"序列图sequence-diagram\"><a class=\"anchor\" href=\"#序列图sequence-diagram\">#</a> 序列图 (sequence diagram)</h3>\n<h4 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h4>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram </span><br><span class=\"line\"><span class=\"code\">\t[参与者1][消息线][参与者2]:消息体</span></span><br><span class=\"line\"><span class=\"code\">    ...</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>sequenceDiagram</code>  为每幅时序图的固定开头</p>\n</blockquote>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"><span class=\"code\">\t\tTitle: 买炸鸡</span></span><br><span class=\"line\"><span class=\"code\">    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？</span></span><br><span class=\"line\"><span class=\"code\">    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">\t\tTitle: 买炸鸡</span><br><span class=\"line\">    救救-&gt;&gt;炸鸡店小哥: 还有炸鸡吗？</span><br><span class=\"line\">    炸鸡店小哥--&gt;&gt;救救: 没有，要现炸</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"参与者participant\"><a class=\"anchor\" href=\"#参与者participant\">#</a> 参与者（participant）</h4>\n<p>传统时序图概念中参与者有角色和类对象之分，但这里我们不做此区分，用参与者表示一切参与交互的事物，可以是人、类对象、系统等形式。中间竖直的线段从上至下表示时间的流逝。</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"><span class=\"code\">    participant 参与者 1</span></span><br><span class=\"line\"><span class=\"code\">    participant 参与者 2</span></span><br><span class=\"line\"><span class=\"code\">    ...</span></span><br><span class=\"line\"><span class=\"code\">    participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>participant &lt;参与者名称&gt;</code>  声明参与者，语句次序即为参与者横向排列次序。</p>\n</blockquote>\n<h4 id=\"消息线\"><a class=\"anchor\" href=\"#消息线\">#</a> 消息线</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-&gt;</td>\n<td style=\"text-align:left\">无箭头的实线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">--&gt;</td>\n<td style=\"text-align:left\">无箭头的虚线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-&gt;&gt;</td>\n<td style=\"text-align:left\">有箭头的实线（主动发出消息）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–-&gt;&gt;</td>\n<td style=\"text-align:left\">有箭头的虚线（响应）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-x</td>\n<td style=\"text-align:left\">末端为叉的实线（表示异步）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">--x</td>\n<td style=\"text-align:left\">末端为叉的虚线（表示异步）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"处理中-激活框\"><a class=\"anchor\" href=\"#处理中-激活框\">#</a> 处理中 - 激活框</h4>\n<p>从消息接收方的时间线上标记一小段时间，表示对消息进行处理的时间间隔。</p>\n<p>在消息线末尾增加  <code>+</code>  ，则消息接收者进入当前消息的 “处理中” 状态；<br />\n在消息线末尾增加  <code>-</code>  ，则消息接收者离开当前消息的 “处理中” 状态。</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"><span class=\"code\">    participant 99 as 救救</span></span><br><span class=\"line\"><span class=\"code\">    participant seller as 炸鸡店小哥</span></span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; seller: 还有炸鸡吗？</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; 99: 没有，要现炸。</span></span><br><span class=\"line\"><span class=\"code\">    99 -x +seller:给我炸！</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant 99 as 救救</span><br><span class=\"line\">    participant seller as 炸鸡店小哥</span><br><span class=\"line\">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class=\"line\">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class=\"line\">    99 -x +seller:给我炸！</span><br><span class=\"line\">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></p>\n<h4 id=\"注解note\"><a class=\"anchor\" href=\"#注解note\">#</a> 注解（note）</h4>\n<p>语法如下</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Note 位置表述 参与者: 标注文字</span><br></pre></td></tr></table></figure></p>\n<p>其中位置表述可以为</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">表述</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">right of</td>\n<td style=\"text-align:left\">右侧</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">left of</td>\n<td style=\"text-align:left\">左侧</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">over</td>\n<td style=\"text-align:left\">在当中，可以横跨多个参与者</td>\n</tr>\n</tbody>\n</table>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"><span class=\"code\">    participant 99 as 救救</span></span><br><span class=\"line\"><span class=\"code\">    participant seller as 炸鸡店小哥</span></span><br><span class=\"line\"><span class=\"code\">    Note over 99,seller : 热爱炸鸡</span></span><br><span class=\"line\"><span class=\"code\">    Note left of 99 : 女</span></span><br><span class=\"line\"><span class=\"code\">    Note right of seller : 男</span></span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; seller: 还有炸鸡吗？</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; 99: 没有，要现炸。</span></span><br><span class=\"line\"><span class=\"code\">    99 -x +seller : 给我炸！</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant 99 as 救救</span><br><span class=\"line\">    participant seller as 炸鸡店小哥</span><br><span class=\"line\">    Note over 99,seller : 热爱炸鸡</span><br><span class=\"line\">    Note left of 99 : 女</span><br><span class=\"line\">    Note right of seller : 男</span><br><span class=\"line\">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class=\"line\">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class=\"line\">    99 -x +seller : 给我炸！</span><br><span class=\"line\">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"循环loop\"><a class=\"anchor\" href=\"#循环loop\">#</a> 循环（loop）</h4>\n<p>在条件满足时，重复发出消息序列。（相当于编程语言中的 while 语句。）</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"><span class=\"code\">    participant 99 as 救救</span></span><br><span class=\"line\"><span class=\"code\">    participant seller as 炸鸡店小哥</span></span><br><span class=\"line\"><span class=\"code\">   </span></span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; seller: 还有炸鸡吗？</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; 99: 没有，要现炸。</span></span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; +seller:给我炸！</span></span><br><span class=\"line\"><span class=\"code\">    loop 三分钟一次</span></span><br><span class=\"line\"><span class=\"code\">        99 -&gt;&gt; seller : 我的炸鸡好了吗？</span></span><br><span class=\"line\"><span class=\"code\">        seller --&gt;&gt; 99 : 正在炸</span></span><br><span class=\"line\"><span class=\"code\">    end</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; -99: 您的炸鸡好了！</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant 99 as 救救</span><br><span class=\"line\">    participant seller as 炸鸡店小哥</span><br><span class=\"line\">   </span><br><span class=\"line\">    99 -&gt;&gt; seller: 还有炸鸡吗？</span><br><span class=\"line\">    seller --&gt;&gt; 99: 没有，要现炸。</span><br><span class=\"line\">    99 -&gt;&gt; +seller:给我炸！</span><br><span class=\"line\">    loop 三分钟一次</span><br><span class=\"line\">        99 -&gt;&gt; seller : 我的炸鸡好了吗？</span><br><span class=\"line\">        seller --&gt;&gt; 99 : 正在炸</span><br><span class=\"line\">    end</span><br><span class=\"line\">    seller --&gt;&gt; -99: 您的炸鸡好了！</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"选择alt\"><a class=\"anchor\" href=\"#选择alt\">#</a> 选择（alt）</h4>\n<p>在多个条件中作出判断，每个条件将对应不同的消息序列。（相当于 if 及 else if 语句。）</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram    </span><br><span class=\"line\"><span class=\"code\">    participant 99 as 救救</span></span><br><span class=\"line\"><span class=\"code\">    participant seller as 炸鸡店小哥</span></span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？</span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; 99 : 可卖的炸鸡数</span></span><br><span class=\"line\"><span class=\"code\">    </span></span><br><span class=\"line\"><span class=\"code\">    alt 可卖的炸鸡数 &gt; 3</span></span><br><span class=\"line\"><span class=\"code\">        99 -&gt;&gt; seller : 买三只！</span></span><br><span class=\"line\"><span class=\"code\">    else 1 &lt; 可卖的炸鸡数 &lt; 3</span></span><br><span class=\"line\"><span class=\"code\">        99 -&gt;&gt; seller : 有多少买多少</span></span><br><span class=\"line\"><span class=\"code\">    else 可卖的炸鸡数 &lt; 1</span></span><br><span class=\"line\"><span class=\"code\">        99 -&gt;&gt; seller : 那我明天再来</span></span><br><span class=\"line\"><span class=\"code\">    end</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; 99 : 欢迎下次光临</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram    </span><br><span class=\"line\">    participant 99 as 救救</span><br><span class=\"line\">    participant seller as 炸鸡店小哥</span><br><span class=\"line\">    99 -&gt;&gt; seller : 现在就多少只炸好的炸鸡？</span><br><span class=\"line\">    seller --&gt;&gt; 99 : 可卖的炸鸡数</span><br><span class=\"line\">    </span><br><span class=\"line\">    alt 可卖的炸鸡数 &gt; 3</span><br><span class=\"line\">        99 -&gt;&gt; seller : 买三只！</span><br><span class=\"line\">    else 1 &lt; 可卖的炸鸡数 &lt; 3</span><br><span class=\"line\">        99 -&gt;&gt; seller : 有多少买多少</span><br><span class=\"line\">    else 可卖的炸鸡数 &lt; 1</span><br><span class=\"line\">        99 -&gt;&gt; seller : 那我明天再来</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    seller --&gt;&gt; 99 : 欢迎下次光临</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"可选opt\"><a class=\"anchor\" href=\"#可选opt\">#</a> 可选（opt）</h4>\n<p>在某条件满足时执行消息序列，否则不执行。相当于单个分支的 if 语句。</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\"><span class=\"code\">    participant 99 as 救救</span></span><br><span class=\"line\"><span class=\"code\">    participant seller as 炸鸡店小哥</span></span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; seller : 买炸鸡</span></span><br><span class=\"line\"><span class=\"code\">    opt 全都卖完了</span></span><br><span class=\"line\"><span class=\"code\">        seller --&gt;&gt; 99 : 下次再来</span></span><br><span class=\"line\"><span class=\"code\">    end</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant 99 as 救救</span><br><span class=\"line\">    participant seller as 炸鸡店小哥</span><br><span class=\"line\">    99 -&gt;&gt; seller : 买炸鸡</span><br><span class=\"line\">    opt 全都卖完了</span><br><span class=\"line\">        seller --&gt;&gt; 99 : 下次再来</span><br><span class=\"line\">    end</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"并行par\"><a class=\"anchor\" href=\"#并行par\">#</a> 并行（Par）</h4>\n<p>将消息序列分成多个片段，这些片段并行执行。</p>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">   participant 99 as 救救</span><br><span class=\"line\">   participant seller as 炸鸡店小哥</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"code\">    99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">    par 并行执行</span></span><br><span class=\"line\"><span class=\"code\">        seller -&gt;&gt; seller : 装可乐</span></span><br><span class=\"line\"><span class=\"code\">    and</span></span><br><span class=\"line\"><span class=\"code\">        seller -&gt;&gt; seller : 炸炸鸡</span></span><br><span class=\"line\"><span class=\"code\">    end</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">    seller --&gt;&gt; 99 : 您的炸鸡好了！</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">   participant 99 as 救救</span><br><span class=\"line\">   participant seller as 炸鸡店小哥</span><br><span class=\"line\">   </span><br><span class=\"line\">    99 -&gt;&gt; seller : 一个炸鸡，一杯可乐！</span><br><span class=\"line\"></span><br><span class=\"line\">    par 并行执行</span><br><span class=\"line\">        seller -&gt;&gt; seller : 装可乐</span><br><span class=\"line\">    and</span><br><span class=\"line\">        seller -&gt;&gt; seller : 炸炸鸡</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    seller --&gt;&gt; 99 : 您的炸鸡好了！</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"饼图pie\"><a class=\"anchor\" href=\"#饼图pie\">#</a> 饼图（Pie）</h3>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\"><span class=\"code\">    title Pie Chart</span></span><br><span class=\"line\"><span class=\"code\">    &quot;Dogs&quot; : 386</span></span><br><span class=\"line\"><span class=\"code\">    &quot;Cats&quot; : 85</span></span><br><span class=\"line\"><span class=\"code\">    &quot;Rats&quot; : 150 </span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">    title Pie Chart</span><br><span class=\"line\">    &quot;Dogs&quot; : 386</span><br><span class=\"line\">    &quot;Cats&quot; : 85</span><br><span class=\"line\">    &quot;Rats&quot; : 150 </span><br><span class=\"line\">    &quot;panda&quot; : 200</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3N1cHBvcnQudHlwb3JhLmlvL0RyYXctRGlhZ3JhbXMtV2l0aC1NYXJrZG93bi8=\">Typora 支持 mermaid 的官方链接</span></p>\n</blockquote>\n<h3 id=\"甘特图gantt\"><a class=\"anchor\" href=\"#甘特图gantt\">#</a> 甘特图（gantt）</h3>\n<p><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> title 标题</span><br><span class=\"line\">dateFormat 日期格式</span><br><span class=\"line\">section 部分名</span><br><span class=\"line\">任务名:参数一, 参数二, 参数三, 参数四，参数五</span><br><span class=\"line\"></span><br><span class=\"line\"> //参数一：crit（是否重要，红框框） 或者 不填</span><br><span class=\"line\"> //参数二：done（已完成）、active（正在进行） 或者 不填(表示为待完成状态)</span><br><span class=\"line\"> //参数三：取小名 或者 不填</span><br><span class=\"line\"> //参数四：任务开始时间</span><br><span class=\"line\"> //参数五：任务结束时间</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXJtYWlkLWpzLmdpdGh1Yi5pby9tZXJtYWlkLyMvZ2FudHQ=\">官方教程</span></p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">       dateFormat  YYYY-MM-DD</span><br><span class=\"line\">       title Adding GANTT diagram functionality to mermaid</span><br><span class=\"line\"></span><br><span class=\"line\">       section A section</span><br><span class=\"line\">       Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">       Active task               :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">       Future task               :         des3, after des2, 5d</span><br><span class=\"line\">       Future task2              :         des4, after des3, 5d</span><br><span class=\"line\"></span><br><span class=\"line\">       section Critical tasks</span><br><span class=\"line\">       Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class=\"line\">       Implement parser and jison          :crit, done, after des1, 2d</span><br><span class=\"line\">       Create tests for parser             :crit, active, 3d</span><br><span class=\"line\">       Future task in critical line        :crit, 5d</span><br><span class=\"line\">       Create tests for renderer           :2d</span><br><span class=\"line\">       Add to mermaid                      :1d</span><br><span class=\"line\"></span><br><span class=\"line\">       section Documentation</span><br><span class=\"line\">       Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class=\"line\">       Add gantt diagram to demo page      :after a1  , 20h</span><br><span class=\"line\">       Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class=\"line\"></span><br><span class=\"line\">       section Last section</span><br><span class=\"line\">       Describe gantt syntax               :after doc1, 3d</span><br><span class=\"line\">       Add gantt diagram to demo page      :20h</span><br><span class=\"line\">       Add another diagram to demo page    :48h</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">       dateFormat  YYYY-MM-DD</span><br><span class=\"line\">       title Adding GANTT diagram functionality to mermaid</span><br><span class=\"line\"></span><br><span class=\"line\">       section A section</span><br><span class=\"line\">       Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">       Active task               :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">       Future task               :         des3, after des2, 5d</span><br><span class=\"line\">       Future task2              :         des4, after des3, 5d</span><br><span class=\"line\"></span><br><span class=\"line\">       section Critical tasks</span><br><span class=\"line\">       Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class=\"line\">       Implement parser and jison          :crit, done, after des1, 2d</span><br><span class=\"line\">       Create tests for parser             :crit, active, 3d</span><br><span class=\"line\">       Future task in critical line        :crit, 5d</span><br><span class=\"line\">       Create tests for renderer           :2d</span><br><span class=\"line\">       Add to mermaid                      :1d</span><br><span class=\"line\"></span><br><span class=\"line\">       section Documentation</span><br><span class=\"line\">       Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class=\"line\">       Add gantt diagram to demo page      :after a1  , 20h</span><br><span class=\"line\">       Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class=\"line\"></span><br><span class=\"line\">       section Last section</span><br><span class=\"line\">       Describe gantt syntax               :after doc1, 3d</span><br><span class=\"line\">       Add gantt diagram to demo page      :20h</span><br><span class=\"line\">       Add another diagram to demo page    :48h</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "学习&技术"
            ]
        },
        {
            "id": "http://simoxdcs.github.io/2020/11/18/xuexi/linux%E6%8D%A2%E6%BA%90/",
            "url": "http://simoxdcs.github.io/2020/11/18/xuexi/linux%E6%8D%A2%E6%BA%90/",
            "title": "linux相关",
            "date_published": "2020-11-18T06:20:02.000Z",
            "content_html": "<p>## 第一章</p>\n<p>因为我 Linux 也是才开始用。。结果自己就遇到了很多麻烦的事情。。就自己在网上东扒西找的姑且算是解决了。。就自己写个东西一面自己在遇到的时候又不会了。。<br />\n换源：<br />\nsudo pacman-mirrors -i -c China -m rank  更新镜像<br />\n sudo vim /etc/pacman.d/mirrorlist  查看选择的源<br />\n sudo vim /etc/pacman.conf  设置源（可以自己添加源链接进去）</p>\n<p>我用的是 manjaro 这个 archlinux 的衍生版本。。还算是怪好用的<br />\n更新 ：<br />\n1.sudo pacman -S cuda 安装<br />\n 2.pacman -Syu 更新系统<br />\n 3.pacman -Syy 强制更新<br />\n 4.pacman -Ss keyword\t在仓库中搜索含关键字的包（常用）<br />\n5.pacman -Qs keyword\t搜索已安装的包（常用）\t<br />\n6.pacman -Qi package_name\t查询本地安装包的详细信息<br />\n 7.pacman -Ql package_name\t列出该包的文件<br />\n 8.pacman -Fs keyword\t按文件名查找软件库<br />\n 9.pacman -Si package_name\t显示远程软件包的详尽的信息<br />\n 10.pacman -Qii package_name\t使用两个 -i 将同时显示备份文件和修改状态<br />\n 11.pacman -Ql package_name\t要获取已安装软件包所包含文件的列表<br />\n 12.pacman -Fl package_name\t查询远程库中软件包包含的文件<br />\n 13.pacman -Qk package_name\t检查软件包安装的文件是否都存在<br />\n 14.pacman -Fo /path/to/file_name\t查询文件属于远程数据库中的哪个软件包<br />\n 15.pacman -Qdt\t要罗列所有不再作为依赖的软件包 (孤立 orphans)<br />\n 16.pacman -Qet\t要罗列所有明确安装而且不被其它包依赖的软件包<br />\n 17.pactree package_name\t要显示软件包的依赖树<br />\n 18.whoneeds package_name\t检查一个安装的软件包被那些包依赖<br />\n 19.pactree -r package_name\t检查一个安装的软件包被那些包依赖<br />\n 20..pacman -Sw package_name\t只下载包，不安装。<br />\n21.pacman -Sc\t清理未安装的包文件（常用）包文件位于 /var/cache/pacman/pkg/ 目录<br />\n 22.pacman -Scc\t清理所有的缓存文件（常用）<br />\n23.pacman -R package_name\t该命令将只删除包，保留其全部已经安装的依赖关系<br />\n 24.pacman -Rs package_name\t在删除包的同时，删除其所有没有被其他已安装软件包使用的依赖关系（常用）<br />\n25.pacman -Rsc package_name\t在删除包的同时，删除所有依赖这个软件包的程序<br />\n 26.pacman -Rd package_name\t在删除包时不检查依赖<br />\n 8.pacman -Fs keyword    按文件名查找软件库<br />\n 9.pacman -Si package_name       显示远程软件包的详尽的信息<br />\n 10.pacman -Qii package_name     使用两个 -i 将同时显示备份文件和修改状态<br />\n 11.pacman -Ql package_name      要获取已安装软件包所包含文件的列表<br />\n 12.pacman -Fl package_name      查询远程库中软件包包含的文件<br />\n 13.pacman -Qk package_name      检查软件包安装的文件是否都存在<br />\n 14.pacman -Fo /path/to/file_name        查询文件属于远程数据库中的哪个软件包<br />\n 15.pacman -Qdt  要罗列所有不再作为依赖的软件包 (孤立 orphans)<br />\n 16.pacman -Qet  要罗列所有明确安装而且不被其它包依赖的软件包<br />\n 17.pactree package_name 要显示软件包的依赖树<br />\n 18.whoneeds package_name        检查一个安装的软件包被那些包依赖<br />\n 19.pactree -r package_name      检查一个安装的软件包被那些包依赖<br />\n 20..pacman -Sw package_name     只下载包，不安装。<br />\n21.pacman -Sc   清理未安装的包文件（常用）包文件位于 /var/cache/pacman/pkg/ 目录<br />\n 22.pacman -Scc  清理所有的缓存文件（常用）<br />\n23.pacman -R package_name       该命令将只删除包，保留其全部已经安装的依赖关系<br />\n 24.pacman -Rs package_name      在删除包的同时，删除其所有没有被其他已安装软件包<br />\n使用的依赖关系（常用）<br />\n25.pacman -Rsc package_name     在删除包的同时，删除所有依赖这个软件包的程序<br />\n 26.pacman -Rd package_name      在删除包时不检查依赖<br />\n 27.pacman -S package_name\t执行 pacman -S firefox 将安装 Firefox（常用）\t你也可以同时安装多个包，只需以空格分隔包名即<br />\n pacman -Sy package_name\t与上面命令不同的是，该命令将在同步包数据库后再执行安装。28.pacman -Sv package_name\t在显示一些操作信息后执行安装。\t<br />\n29.pacman -U local_package_name\t安装本地包，其扩展名为 pkg.tar.gz 或 pkg.tar.xz\t30.pacman -U url\t安装一个远程包（不在 pacman 配置的源里面）</p>\n<p>姑且先写这么多。。不够的以后再补上吧。</p>\n",
            "tags": [
                "学习&技术"
            ]
        },
        {
            "id": "http://simoxdcs.github.io/2020/11/18/jiaocheng/%E6%95%99%E7%A8%8B/",
            "url": "http://simoxdcs.github.io/2020/11/18/jiaocheng/%E6%95%99%E7%A8%8B/",
            "title": "博客教程",
            "date_published": "2020-11-18T06:07:53.000Z",
            "content_html": "<p>## 第一章</p>\n<p>搭建 hexo 博客需要的几样东西：<br />\n1. 一台联网的电脑    2.git    3.nodejs    4. 脑子    5. 手（狗头保命<br />\n几个必须的较长的命令：<br />\n1.（安装国内的 cnpm (淘宝源)）npm install -g cnpm --registry=https://registry.npm.taobao.org<br />\n2.（安装 hexo 框架）cnpm install -g hexo-cli<br />\n3.（安装部署到远端的 hexo 工具）cnpm install --save hexo-deployer-git<br />\n 注意事项：<br />\n1. 在部署到远端之前记得先本地生成预览一下<br />\n 2. 部署到 GitHub 服务器之前记得往博客里面添加 GitHub 的账号信息<br />\n 3. 如果部署到远端失败就尝试推倒墙娘然后再试一次。<br />\n4. 在 config 里面最下方的 repo 后面写 GitHub 给的链接，在 branch 后面填 master<br />\n（第一次写也就写成这样了。。估计也就我自己看得懂。。。）</p>\n",
            "tags": [
                "学习&技术"
            ]
        }
    ]
}